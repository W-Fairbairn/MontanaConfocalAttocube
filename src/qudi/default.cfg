#  Example Qudi configuration file.
#  The recommended path for user specific files is C:\Users\<user_name>\qudi\config

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:
    psat_gui:
        module.Class: 'psat.psat_gui.PsatGUI'
        connect:
            psat_logic: 'psat_logic'

    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_reader_logic

    scanner_gui:
        module.Class: 'scanning.scannergui.ScannerGui'
        options:
            image_axes_padding: 0.02
            default_position_unit_prefix: null  # optional, use unit prefix characters, e.g. 'u' or 'n'
        connect:
            scanning_logic: scanning_probe_logic
            data_logic: scanning_data_logic
            optimize_logic: scanning_optimize_logic


    poi_manager_gui:
        module.Class: 'poimanager.poimanagergui.PoiManagerGui'
        options:
            data_scan_axes: xy  #optional, default: xy
        connect:
            poi_manager_logic: 'poi_manager_logic'

    opx_poi_manager_gui:
        module.Class: 'opx_poimanager.opxpoimanager.PoiManagerGui'
        options:
            data_scan_axes: xy  #optional, default: xy
        connect:
            poi_manager_logic: 'opx_poi_manager_logic'

    opx_controller_gui:
        module.Class: 'opx_controller.opxcontroller.OPXControllerGUI'
        connect:
            opx_controller_logic: 'opx_controller_logic'

    camera_gui:
        module.Class: 'camera.cameragui.CameraGui'
        connect:
            camera_logic: camera_logic

    laser_gui:
        module.Class: 'laser.laser_gui.LaserGui'
        connect:
            laser_logic: laser_logic

    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'

    switch_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'

    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'

    qdplot_gui:
        module.Class: 'qdplot.qdplot_gui.QDPlotterGui'
        connect:
            qdplot_logic: 'qdplot_logic'

    spectrometer:
        module.Class: 'spectrometer.spectrometer_gui.SpectrometerGui'
        connect:
            spectrometer_logic: 'spectrometerlogic'

    pid_gui:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pid_logic: pid_logic

    task_runner_gui:
        module.Class: 'taskrunner.task_runner_gui.TaskRunnerGui'
        connect:
            task_runner: 'task_runner_logic'

logic:
    psat_logic:
        module.Class: 'psat_logic.PsatLogic'
        connect:
            psat: nicard

    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        options:
            max_frame_rate: 20  # optional (default: 20Hz)
            channel_buffer_size: 1048576  # optional (default: 1MSample)
            max_raw_data_bytes: 1073741824  # optional (default: 1GB)
        connect:
            streamer: ni_instream

    scanning_probe_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        options:
            max_history_length: 20
            max_scan_update_interval: 2
            position_update_interval: 1
        connect:
            scanner: scanner_dummy
            z_stage: attocube_dummy


    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        options:
            max_history_length: 20
        connect:
            scan_logic: scanning_probe_logic

    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: scanning_probe_logic
            z_stage: attocube_dummy
            timetagger: timetagger_dummy

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: ni_instream

    poi_manager_logic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scanning_logic: 'scanning_probe_logic'
            optimize_logic: 'scanning_optimize_logic'
            data_logic: 'scanning_data_logic'

    opx_poi_manager_logic:
        module.Class: 'opx_poi_manager_logic.PoiManagerLogic'
        connect:
            scanning_logic: 'scanning_probe_logic'
            optimize_logic: 'scanning_optimize_logic'
            data_logic: 'scanning_data_logic'

    opx_controller_logic:
        module.Class: 'opx_controller_logic.OPXControllerLogic'
        options:
            opx_address: '192.168.88.254'
            octave_address: '192.168.88.253'
        connect:
            opx: 'opx_hardware'

    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            camera: 'thorlabs_camera'

    laser_logic:
        module.Class: 'laser_logic.LaserLogic'
        options:
            query_interval: 0.1
        connect:
            laser: 'laser_dummy'

    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'microwave_dummy'
            data_scanner: 'finite_sampling_input_dummy'

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        options:
            watchdog_interval: 1
            autostart_watchdog: True
        connect:
            switch: 'switch_interfuse'

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #overhead_bytes: 0
        #additional_predefined_methods_path: null
        #additional_sampling_functions_path: null
        #assets_storage_path:
        connect:
            pulsegenerator: 'pulser_dummy'

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        options:
            raw_data_save_type: 'text'
            #additional_extraction_path:
            #additional_analysis_path:
        connect:
            fastcounter: 'fast_counter_dummy'
            #microwave: 'microwave_dummy'
            pulsegenerator: 'pulser_dummy'

    qdplot_logic:
        module.Class: 'qdplot_logic.QDPlotLogic'

    spectrometerlogic:
        module.Class: 'spectrometer_logic.SpectrometerLogic'
        connect:
            spectrometer: 'spectrometer_dummy'

    pid_logic:
        module.Class: 'pid_logic.PIDLogic'
        connect:
            controller: 'softpid'
        options:
            timestep: 0.1

    softpid:
        module.Class: 'software_pid_controller.SoftPIDController'
        options:
            process_value_channel: 'Temperature'
            setpoint_channel: 'Current'
            timestep: 100
        connect:
            process_value: process_control_dummy
            setpoint: process_control_dummy

    task_runner_logic:
        module.Class: 'taskrunner.TaskRunnerLogic'
        options:
            module_tasks: {}

hardware:
    nicard:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev1'
            channels:
                ao0:
                    limits: [-10.0, 10.0]
                    keep_value: True
                ao1:
                    limits: [-10.0, 10.0]
                    keep_value: True

    instream_dummy:
        module.Class: 'dummy.data_instream_dummy.InStreamDummy'
        options:
            channel_names:
                - 'digital 1'
                - 'analog 1'
                - 'analog 2'
                - 'digital 2'
            channel_units:
                - 'Hz'
                - 'V'
                - 'V'
                - 'Hz'
            channel_signals:  # Can be 'counts' or 'sine'
                - 'counts'
                - 'sine'
                - 'sine'
                - 'counts'
            data_type: 'float64'
            sample_timing: 'CONSTANT'  # Can be 'CONSTANT', 'TIMESTAMP' or 'RANDOM'

    ni_instream:
        module.Class: 'ni_x_series.ni_x_series_in_streamer.NIXSeriesInStreamer'
        options:
            device_name: 'Dev1'
            digital_sources: # optional
                - 'PFI5'
            analog_sources: # optional
                - 'ai0'
                - 'ai1'
            # external_sample_cl                                    ock_source: 'PFI0'  # optional
            # external_sample_clock_frequency: 1000  # optional
            adc_voltage_range: [ -10, 10 ]  # optional
            max_channel_samples_buffer: 10000000  # optional
            read_write_timeout: 100  # optionaL

    ni_finite_sampling_io:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_io.NIXSeriesFiniteSamplingIO'
        options:
            device_name: 'Dev1'
            input_channel_units:
                PFI5: 'c/s'
                PFI6: 'c/s'
                ai0: 'V'
                ai1: 'V'
            output_channel_units: # Specify used output channels
                'ao0': 'V'
                'ao1': 'V'
                'ao2': 'V'
                'ao3': 'V'
            adc_voltage_ranges:
                ai0: [ -10, 10 ]  # optional
                ai1: [ -10, 10 ]  # optional
            output_voltage_ranges:
                ao0: [ 1.7, 2.5 ]
                ao1: [ -1.2, -0.8 ]
                ao2: [ 0, 10.0 ]
                ao3: [ -10.0, 10.0 ]
            frame_size_limits: [ 1, 1e9 ]  # optional #TODO actual HW constraint?
            default_output_mode: 'JUMP_LIST' # optional, must be name of SamplingOutputMode
            read_write_timeout: 10  # optional
            sample_clock_output: '/Dev1/PFI11' # optional: routing of sample clock to a physical connection

    ni_finite_sampling_input:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_input.NIXSeriesFiniteSamplingInput'
        options:
            device_name: 'Dev1'
            digital_channel_units: # optional
                'PFI5': 'c/s'
            analog_channel_units: # optional
                'ai0': 'V'
                'ai1': 'V'
            # external_sample_clock_source: 'PFI0'  # optional
            # external_sample_clock_frequency: 1000  # optional
            adc_voltage_range: [ -10, 10 ]  # optional, default [-10, 10]
            max_channel_samples_buffer: 10000000  # optional, default 10000000
            read_write_timeout: 10  # optional, default 10
            sample_clock_output: '/Dev1/PFI20'  # optional
            trigger_edge: RISING  # optional

    ni_scanning_probe:
        module.Class: 'interfuse.ni_scanning_probe_interfuse.NiScanningProbeInterfuse'
        # to use without tilt correction
        # module.Class: 'interfuse.ni_scanning_probe_interfuse.NiScanningProbeInterfuseBare'
        connect:
            scan_hardware: 'ni_finite_sampling_io'
            analog_output: 'nicard_63XX_ao'
        options:
            ni_channel_mapping:
                x: 'ao0'
                y: 'ao1'
                z: 'ao2'
                APD1: 'PFI5'
                APD2: 'PFI6'
                AI0: 'ai0'
            position_ranges: # in m
                x: [ -42e-6, 42e-6 ]
                y: [ -21e-6, 21e-6 ]
                z: [ -5000e-6, 5000e-6 ]
            frequency_ranges: #Aka values written/retrieved per second; Check with connected HW for sensible constraints.
                x: [ 1, 5000 ]
                y: [ 1, 5000 ]
                z: [ 1, 1000 ]
            resolution_ranges:
                x: [ 1, 10000 ]
                y: [ 1, 10000 ]
                z: [ 2, 1000 ]
            input_channel_units:
                APD1: 'c/s'
                APD2: 'c/s'
                AI0: 'V'
            backwards_line_resolution: 50 # optional
            move_velocity: 400e-6 #m/s; This speed is used for scanner movements and avoids jumps from position to position.

    nicard_63XX_ao:
        module.Class: 'ni_x_series.ni_x_series_analog_output.NIXSeriesAnalogOutput'
        options:
            device_name: 'Dev1'
            channels:
                ao0:
                    limits: [ -10.0, 10.0 ]
                    keep_value: True
                ao1:
                    limits: [ -10.0, 10.0 ]
                    keep_value: True
                ao2:
                    limits: [ -10.0, 10.0 ]
                    keep_value: True
                ao3:
                    limits: [ -10.0, 10.0 ]
                    keep_value: True

    scanner_dummy:
        module.Class: 'dummy.scanning_probe_dummy.ScanningProbeDummy'
        options:
            position_ranges:
                'x': [0, 200e-6]
                'y': [0, 200e-6]
                'z': [-5000e-6, 5000e-6]
            frequency_ranges:
                'x': [0, 10000]
                'y': [0, 10000]
                'z': [0, 5000]
            resolution_ranges:
                'x': [2, 2147483647]
                'y': [2, 2147483647]
                'z': [2, 2147483647]
            position_accuracy:
                'x': 10e-9
                'y': 10e-9
                'z': 50e-9
            spot_density: 1e11

    attocube_dummy:
        module.Class: 'fake_attocube_hardware.FakeAttocubeANC350'
        options:
            z_range: [-5000e-6, 5000e-6]

    timetagger_dummy:
        module.Class: 'fake_time_tagger_hardware.FakeTimeTagger'


    finite_sampling_input_dummy:
        module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'
        options:
            simulation_mode: 'ODMR'
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            channel_units:
                'APD counts': 'c/s'
                'Photodiode': 'V'

    finite_sampling_output_dummy:
        module.Class: 'dummy.finite_sampling_output_dummy.FiniteSamplingOutputDummy'
        options:
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            output_mode: 'JUMP_LIST'
            channel_units:
                'Frequency': 'Hz'
                'Voltage': 'V'

    finite_sampling_io_dummy:
        module.Class: 'dummy.finite_sampling_io_dummy.FiniteSamplingIODummy'
        options:
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            default_output_mode: 'JUMP_LIST'
            input_channel_units:
                'APD counts': 'c/s'
                'Photodiode': 'V'
            output_channel_units:
                'Frequency': 'Hz'
                'Voltage': 'V'

    camera_dummy:
        module.Class: 'dummy.camera_dummy.CameraDummy'

    thorlabs_camera:
        module.Class: 'camera.thorlabs.thorlabs_DCx.CameraThorlabs'
        options:
            default_exposure: 0.1
            default_gain: 1.0
            id_camera: 0 # if more tha one camera is present

    laser_dummy:
        module.Class: 'dummy.simple_laser_dummy.SimpleLaserDummy'

    opx_hardware:
        module.Class: 'opx.opx_hardware.OPXHardware'

    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    switch_interfuse:
        module.Class: 'interfuse.switch_combiner_interfuse.SwitchCombinerInterfuse'
        options:
            extend_hardware_name: True
        connect:
            switch1: 'switch1_dummy'
            switch2: 'process_control_dummy'


    switch1_dummy:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        options:
            name: 'First'  # optional
            remember_states: True  # optional
            switches:
                one: ['down', 'up']
                two: ['down', 'up']
                three: ['low', 'middle', 'high']

    fast_counter_dummy:
        module.Class: 'dummy.fast_counter_dummy.FastCounterDummy'
        options:
            gated: False

    pulser_dummy:
        module.Class: 'dummy.pulser_dummy.PulserDummy'
        options:
            force_sequence_option: False

    spectrometer_dummy:
        module.Class: 'dummy.spectrometer_dummy.SpectrometerDummy'

    process_control_dummy:
        module.Class: 'dummy.process_control_dummy.ProcessControlDummy'
        options:
            process_value_channels:
                Temperature:
                    unit: 'K'
                    limits: [0, .inf]
                    dtype: float
                Voltage:
                    unit: 'V'
                    limits: [-10.0, 10.0]
                    dtype: float
            setpoint_channels:
                Current:
                    unit: 'A'
                    limits: [-5, 5]
                    dtype: float
                Frequency:
                    unit: 'Hz'
                    limits: [100.0e3, 20.0e9]
                    dtype: float
            linear_dependency:
                process_value_channel: 'Temperature'
                setpoint_channel: 'Current'
                slope: 10
                offset: 100
                noise: 0.1
